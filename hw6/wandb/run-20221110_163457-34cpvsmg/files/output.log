Running deterministic tests: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
Test 1 starting
Test 1 passed
Test 2 starting
Test 2 passed
Test 3 starting
Test 3 passed
Test 4 starting
Test 4 passed
Test 5 starting
Test 5 passed
Test 6 starting
Test 6 passed
Test 7 starting
Test 7 passed
Test 8 starting
Test 8 passed
Test 9 starting
Test 9 passed
Test 10 starting
Test 10 passed
Test 11 starting
Test 11 passed
Test 12 starting
Test 12 passed
Test 13 starting
Test 13 passed
Test 14 starting
Test 14 passed
Test 15 starting
Test 15 passed
Test 16 starting
Test 16 passed
Test 17 starting
Test 17 passed
Test 18 starting
Test 18 passed
Test 19 starting
Test 19 passed
Test 20 starting
Test 20 passed
Test 21 starting
Test 21 passed
Test 22 starting
Test 22 passed
All deterministic tests passed
Running hoppl-deterministic tests: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Test 1 starting
Test 1 passed
Test 2 starting
Test 2 passed
Test 3 starting
Test 3 passed
Test 4 starting
Test 4 passed
Test 5 starting
Test 5 passed
Test 6 starting
Test 6 passed
Test 7 starting
Test 7 passed
Test 8 starting
Test 8 passed
Test 9 starting
Test 9 passed
Test 10 starting
Test 10 passed
Test 11 starting
Test 11 passed
Test 12 starting
Test 12 passed
All hoppl-deterministic tests passed
Running probabilistic tests: [1, 2, 3, 4, 5, 6, 7, 8]
Test 1 starting
Test truth: ('normal', 5, 1.4142136)
Truth: ('normal', 5, 1.4142136)
p value: 0.43802269816664907
Test 1 passed
Test 2 starting
Test truth: ('beta', 2.0, 5.0)
Truth: ('beta', 2.0, 5.0)
p value: 0.16043294181041312
Test 2 passed
Test 3 starting
Test truth: ('exponential', 0.0, 5.0)
Truth: ('exponential', 0.0, 5.0)
p value: 0.11620913987293513
Test 3 passed
Test 4 starting
Test truth: ('normal', 5.3, 3.2)
Truth: ('normal', 5.3, 3.2)
p value: 0.1026166685801484
Test 4 passed
Test 5 starting
Test truth: ('normalmix', 0.1, -1, 0.3, 0.9, 1, 0.3)
Truth: ('normalmix', 0.1, -1, 0.3, 0.9, 1, 0.3)
p value: 0.957703050491018
Test 5 passed
Test 6 starting
Test truth: ('normal', 0, 1.44)
Truth: ('normal', 0, 1.44)
p value: 0.8651050691179396
Test 6 passed
Test 7 starting
Test truth: ('normal', 0, 1.4142136)
Truth: ('normal', 0, 1.4142136)
p value: 0.7499742515979588
Test 7 passed
Test 8 starting
Test truth: ('normal', 0, 1)
Truth: ('normal', 0, 1)
p value: 0.33741717543575467
Test 8 passed
All probabilistic tests passed
Running: homework_6: 1
Inference method: IS
Maximum samples [log10]: 5.0
Maximum time [s]: 60
/Users/elvis/Desktop/School/2022/cpsc_536/CPSC532W_hw6/sampling.py:57: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  normalized_sigmas = tc.div(tc.tensor(sigmas), sum(sigmas))
Samples shape: torch.Size([100000])
First sample: tensor(48.)
Sample mean: tensor(100.3906)
Sample standard deviation: tensor(99.3497)
Time taken [s]: 62.596928119659424
Number of samples: 100000
Finished program 1
Running: homework_6: 2
Inference method: IS
Maximum samples [log10]: 5.0
Maximum time [s]: 60
Samples shape: torch.Size([100000])
First sample: tensor(6.8963)
Sample mean: tensor(6.6857)
Sample standard deviation: tensor(1.2462)
Time taken [s]: 62.7529981136322
Number of samples: 100000
Finished program 2
Running: homework_6: 3
Inference method: IS
Maximum samples [log10]: 5.0
Maximum time [s]: 60
Samples shape: torch.Size([100000, 17])
First sample: tensor([0., 0., 0., 2., 2., 2., 1., 2., 2., 1., 1., 0., 2., 2., 0., 0., 0.])
Sample mean: tensor([1.3914, 1.5625, 1.4620, 1.4856, 1.4750, 1.4782, 1.4751, 1.4768, 1.4987,
        1.4851, 1.4915, 1.4833, 1.4828, 1.4769, 1.4717, 1.4186, 0.9976])
Sample standard deviation: tensor([0.8916, 0.6787, 0.7557, 0.7435, 0.7509, 0.7451, 0.7523, 0.7449, 0.7368,
        0.7430, 0.7380, 0.7476, 0.7475, 0.7459, 0.7487, 0.7370, 0.8149])
[34m[1mwandb[39m[22m: [33mWARNING[39m wandb.plots.* functions are deprecated and will be removed in a future release. Please use wandb.plot.* instead.
[34m[1mwandb[39m[22m: Visualizing heatmap.
Time taken [s]: 61.49442982673645
Number of samples: 100000
Finished program 3
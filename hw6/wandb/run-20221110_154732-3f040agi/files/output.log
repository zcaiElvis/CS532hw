Running deterministic tests: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
Test 1 starting
Test 1 passed
Test 2 starting
Test 2 passed
Test 3 starting
Test 3 passed
Test 4 starting
Test 4 passed
Test 5 starting
Test 5 passed
Test 6 starting
Test 6 passed
Test 7 starting
Test 7 passed
Test 8 starting
Test 8 passed
Test 9 starting
Test 9 passed
Test 10 starting
Test 10 passed
Test 11 starting
Test 11 passed
Test 12 starting
Test 12 passed
Test 13 starting
Test 13 passed
Test 14 starting
Test 14 passed
Test 15 starting
Test 15 passed
Test 16 starting
Test 16 passed
Test 17 starting
Test 17 passed
Test 18 starting
Test 18 passed
Test 19 starting
Test 19 passed
Test 20 starting
Test 20 passed
Test 21 starting
Test 21 passed
Test 22 starting
Test 22 passed
All deterministic tests passed
Running hoppl-deterministic tests: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Test 1 starting
Test 1 passed
Test 2 starting
Test 2 passed
Test 3 starting
Test 3 passed
Test 4 starting
Test 4 passed
Test 5 starting
Test 5 passed
Test 6 starting
Test 6 passed
Test 7 starting
Test 7 passed
Test 8 starting
Test 8 passed
Test 9 starting
Test 9 passed
Test 10 starting
Test 10 passed
Test 11 starting
Test 11 passed
Test 12 starting
Test 12 passed
All hoppl-deterministic tests passed
Running probabilistic tests: [1, 2, 3, 4, 5, 6, 7, 8]
Test 1 starting
Test truth: ('normal', 5, 1.4142136)
Truth: ('normal', 5, 1.4142136)
p value: 0.0601731018334124
Test 1 passed
Test 2 starting
Test truth: ('beta', 2.0, 5.0)
Truth: ('beta', 2.0, 5.0)
p value: 0.7110450114025548
Test 2 passed
Test 3 starting
Test truth: ('exponential', 0.0, 5.0)
Truth: ('exponential', 0.0, 5.0)
p value: 0.07482671947360342
Test 3 passed
Test 4 starting
Test truth: ('normal', 5.3, 3.2)
Truth: ('normal', 5.3, 3.2)
p value: 0.09083781258455537
Test 4 passed
Test 5 starting
Test truth: ('normalmix', 0.1, -1, 0.3, 0.9, 1, 0.3)
Truth: ('normalmix', 0.1, -1, 0.3, 0.9, 1, 0.3)
p value: 0.6049280701222135
Test 5 passed
Test 6 starting
Test truth: ('normal', 0, 1.44)
Truth: ('normal', 0, 1.44)
p value: 0.12742959142216548
Test 6 passed
Test 7 starting
Test truth: ('normal', 0, 1.4142136)
Truth: ('normal', 0, 1.4142136)
p value: 0.487916067556602
Test 7 passed
Test 8 starting
Test truth: ('normal', 0, 1)
Truth: ('normal', 0, 1)
p value: 0.44400255705495906
Test 8 passed
All probabilistic tests passed
Running: homework_6: 1
Inference method: SMC
Maximum samples [log10]: 4.0
Maximum time [s]: 60
Samples shape: torch.Size([10000])
First sample: tensor(179.)
Sample mean: tensor(98.7035)
Sample standard deviation: tensor(100.3972)
Time taken [s]: 66.45240187644958
Number of samples: 10000
Finished program 1
Running: homework_6: 2
Inference method: SMC
Maximum samples [log10]: 4.0
Maximum time [s]: 60
Sample size: 10000
Effective sample size: tensor(378.9750)
Fractional sample size: tensor(0.0379)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(4309.3740)
Fractional sample size: tensor(0.4309)
Sum of weights: tensor(1., dtype=torch.float64)
Samples shape: torch.Size([10000])
First sample: tensor(7.6905)
Sample mean: tensor(7.1563)
Sample standard deviation: tensor(0.8195)
Time taken [s]: 7.814879894256592
Number of samples: 10000
Finished program 2
Running: homework_6: 3
Inference method: SMC
Maximum samples [log10]: 4.0
Maximum time [s]: 60
Sample size: 10000
Effective sample size: tensor(8729.2598)
Fractional sample size: tensor(0.8729)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(8934.6113)
Fractional sample size: tensor(0.8935)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(9132.6133)
Fractional sample size: tensor(0.9133)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(9552.0869)
Fractional sample size: tensor(0.9552)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(9547.4111)
Fractional sample size: tensor(0.9547)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(1655.4933)
Fractional sample size: tensor(0.1655)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(3349.1997)
Fractional sample size: tensor(0.3349)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(9359.0059)
Fractional sample size: tensor(0.9359)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(9546.8604)
Fractional sample size: tensor(0.9547)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(9559.8594)
Fractional sample size: tensor(0.9560)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(9422.9121)
Fractional sample size: tensor(0.9423)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(1890.2394)
Fractional sample size: tensor(0.1890)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(9469.1309)
Fractional sample size: tensor(0.9469)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(9524.8721)
Fractional sample size: tensor(0.9525)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(8384.8740)
Fractional sample size: tensor(0.8385)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 10000
Effective sample size: tensor(8033.3911)
Fractional sample size: tensor(0.8033)
Sum of weights: tensor(1., dtype=torch.float64)
Samples shape: torch.Size([10000, 17])
First sample: tensor([0., 2., 2., 2., 1., 2., 2., 2., 0., 2., 0., 1., 0., 2., 2., 1., 1.])
Sample mean: tensor([1.4299, 1.5407, 1.7030, 1.5905, 1.0163, 1.4065, 1.6463, 1.6919, 1.6348,
        1.0156, 0.1632, 1.6486, 1.6846, 1.6840, 1.6261, 1.5357, 0.9040])
Sample standard deviation: tensor([0.8699, 0.8098, 0.5593, 0.6976, 0.1266, 0.7779, 0.6587, 0.6231, 0.6292,
        0.9756, 0.5475, 0.6397, 0.6504, 0.5676, 0.6244, 0.5803, 0.8192])
[34m[1mwandb[39m[22m: [33mWARNING[39m wandb.plots.* functions are deprecated and will be removed in a future release. Please use wandb.plot.* instead.
[34m[1mwandb[39m[22m: Visualizing heatmap.
Time taken [s]: 79.86349701881409
Number of samples: 10000
Finished program 3
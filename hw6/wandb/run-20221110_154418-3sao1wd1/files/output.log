Running deterministic tests: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
Test 1 starting
Test 1 passed
Test 2 starting
Test 2 passed
Test 3 starting
Test 3 passed
Test 4 starting
Test 4 passed
Test 5 starting
Test 5 passed
Test 6 starting
Test 6 passed
Test 7 starting
Test 7 passed
Test 8 starting
Test 8 passed
Test 9 starting
Test 9 passed
Test 10 starting
Test 10 passed
Test 11 starting
Test 11 passed
Test 12 starting
Test 12 passed
Test 13 starting
Test 13 passed
Test 14 starting
Test 14 passed
Test 15 starting
Test 15 passed
Test 16 starting
Test 16 passed
Test 17 starting
Test 17 passed
Test 18 starting
Test 18 passed
Test 19 starting
Test 19 passed
Test 20 starting
Test 20 passed
Test 21 starting
Test 21 passed
Test 22 starting
Test 22 passed
All deterministic tests passed
Running hoppl-deterministic tests: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Test 1 starting
Test 1 passed
Test 2 starting
Test 2 passed
Test 3 starting
Test 3 passed
Test 4 starting
Test 4 passed
Test 5 starting
Test 5 passed
Test 6 starting
Test 6 passed
Test 7 starting
Test 7 passed
Test 8 starting
Test 8 passed
Test 9 starting
Test 9 passed
Test 10 starting
Test 10 passed
Test 11 starting
Test 11 passed
Test 12 starting
Test 12 passed
All hoppl-deterministic tests passed
Running probabilistic tests: [1, 2, 3, 4, 5, 6, 7, 8]
Test 1 starting
Test truth: ('normal', 5, 1.4142136)
Truth: ('normal', 5, 1.4142136)
p value: 0.724152240175223
Test 1 passed
Test 2 starting
Test truth: ('beta', 2.0, 5.0)
Truth: ('beta', 2.0, 5.0)
p value: 0.08441187820585183
Test 2 passed
Test 3 starting
Test truth: ('exponential', 0.0, 5.0)
Truth: ('exponential', 0.0, 5.0)
p value: 0.5885704840273926
Test 3 passed
Test 4 starting
Test truth: ('normal', 5.3, 3.2)
Truth: ('normal', 5.3, 3.2)
p value: 0.4764901201861603
Test 4 passed
Test 5 starting
Test truth: ('normalmix', 0.1, -1, 0.3, 0.9, 1, 0.3)
Truth: ('normalmix', 0.1, -1, 0.3, 0.9, 1, 0.3)
p value: 0.7704249836314792
Test 5 passed
Test 6 starting
Test truth: ('normal', 0, 1.44)
Truth: ('normal', 0, 1.44)
p value: 0.9565731535033896
Test 6 passed
Test 7 starting
Test truth: ('normal', 0, 1.4142136)
Truth: ('normal', 0, 1.4142136)
p value: 0.31063837075408873
Test 7 passed
Test 8 starting
Test truth: ('normal', 0, 1)
Truth: ('normal', 0, 1)
p value: 0.6611833672690668
Test 8 passed
All probabilistic tests passed
Running: homework_6: 1
Inference method: SMC
Maximum samples [log10]: 0.0
Maximum time [s]: 60
Samples shape: torch.Size([1])
First sample: tensor(142.)
Sample mean: tensor(142.)
Sample standard deviation: tensor(nan)
Time taken [s]: 0.30599498748779297
Number of samples: 1
Finished program 1
Running: homework_6: 2
Inference method: SMC
Maximum samples [log10]: 0.0
Maximum time [s]: 60
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Samples shape: torch.Size([1])
First sample: tensor(-0.2446)
Sample mean: tensor(-0.2446)
Sample standard deviation: tensor(nan)
Time taken [s]: 0.15819382667541504
Number of samples: 1
Finished program 2
Running: homework_6: 3
Inference method: SMC
Maximum samples [log10]: 0.0
Maximum time [s]: 60
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 1
Effective sample size: tensor(1.)
Fractional sample size: tensor(1.)
Sum of weights: tensor(1., dtype=torch.float64)
Samples shape: torch.Size([1, 17])
First sample: tensor([2., 1., 2., 2., 2., 2., 2., 2., 2., 2., 1., 2., 2., 2., 2., 1., 0.])
Sample mean: tensor([2., 1., 2., 2., 2., 2., 2., 2., 2., 2., 1., 2., 2., 2., 2., 1., 0.])
Sample standard deviation: tensor([nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan])
[34m[1mwandb[39m[22m: [33mWARNING[39m wandb.plots.* functions are deprecated and will be removed in a future release. Please use wandb.plot.* instead.
[34m[1mwandb[39m[22m: Visualizing heatmap.
Time taken [s]: 0.3518187999725342
Number of samples: 1
Finished program 3
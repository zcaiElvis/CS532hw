Running deterministic tests: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
Test 1 starting
Test 1 passed
Test 2 starting
Test 2 passed
Test 3 starting
Test 3 passed
Test 4 starting
Test 4 passed
Test 5 starting
Test 5 passed
Test 6 starting
Test 6 passed
Test 7 starting
Test 7 passed
Test 8 starting
Test 8 passed
Test 9 starting
Test 9 passed
Test 10 starting
Test 10 passed
Test 11 starting
Test 11 passed
Test 12 starting
Test 12 passed
Test 13 starting
Test 13 passed
Test 14 starting
Test 14 passed
Test 15 starting
Test 15 passed
Test 16 starting
Test 16 passed
Test 17 starting
Test 17 passed
Test 18 starting
Test 18 passed
Test 19 starting
Test 19 passed
Test 20 starting
Test 20 passed
Test 21 starting
Test 21 passed
Test 22 starting
Test 22 passed
All deterministic tests passed
Running hoppl-deterministic tests: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Test 1 starting
Test 1 passed
Test 2 starting
Test 2 passed
Test 3 starting
Test 3 passed
Test 4 starting
Test 4 passed
Test 5 starting
Test 5 passed
Test 6 starting
Test 6 passed
Test 7 starting
Test 7 passed
Test 8 starting
Test 8 passed
Test 9 starting
Test 9 passed
Test 10 starting
Test 10 passed
Test 11 starting
Test 11 passed
Test 12 starting
Test 12 passed
All hoppl-deterministic tests passed
Running probabilistic tests: [1, 2, 3, 4, 5, 6, 7, 8]
Test 1 starting
Test truth: ('normal', 5, 1.4142136)
Truth: ('normal', 5, 1.4142136)
p value: 0.4420387689105254
Test 1 passed
Test 2 starting
Test truth: ('beta', 2.0, 5.0)
Truth: ('beta', 2.0, 5.0)
p value: 0.8908026943503793
Test 2 passed
Test 3 starting
Test truth: ('exponential', 0.0, 5.0)
Truth: ('exponential', 0.0, 5.0)
p value: 0.30317433724462306
Test 3 passed
Test 4 starting
Test truth: ('normal', 5.3, 3.2)
Truth: ('normal', 5.3, 3.2)
p value: 0.5832372932058238
Test 4 passed
Test 5 starting
Test truth: ('normalmix', 0.1, -1, 0.3, 0.9, 1, 0.3)
Truth: ('normalmix', 0.1, -1, 0.3, 0.9, 1, 0.3)
p value: 0.5638955104908985
Test 5 passed
Test 6 starting
Test truth: ('normal', 0, 1.44)
Truth: ('normal', 0, 1.44)
p value: 0.8043330360307355
Test 6 passed
Test 7 starting
Test truth: ('normal', 0, 1.4142136)
Truth: ('normal', 0, 1.4142136)
p value: 0.9450253491151236
Test 7 passed
Test 8 starting
Test truth: ('normal', 0, 1)
Truth: ('normal', 0, 1)
p value: 0.13586200173182073
Test 8 passed
All probabilistic tests passed
Running: homework_6: 1
Inference method: SMC
Maximum samples [log10]: 5.0
Maximum time [s]: 60
Samples shape: torch.Size([100000])
First sample: tensor(5.)
Sample mean: tensor(98.4059)
Sample standard deviation: tensor(98.7933)
Time taken [s]: 662.0169179439545
Number of samples: 100000
Finished program 1
Running: homework_6: 2
Inference method: SMC
Maximum samples [log10]: 5.0
Maximum time [s]: 60
Sample size: 100000
Effective sample size: tensor(3701.4221)
Fractional sample size: tensor(0.0370)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(42564.7305)
Fractional sample size: tensor(0.4256)
Sum of weights: tensor(1., dtype=torch.float64)
Samples shape: torch.Size([100000])
First sample: tensor(7.9038)
Sample mean: tensor(7.2937)
Sample standard deviation: tensor(0.9077)
Time taken [s]: 74.26151013374329
Number of samples: 100000
Finished program 2
Running: homework_6: 3
Inference method: SMC
Maximum samples [log10]: 5.0
Maximum time [s]: 60
Sample size: 100000
Effective sample size: tensor(87328.5781)
Fractional sample size: tensor(0.8733)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(89082.5391)
Fractional sample size: tensor(0.8908)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(91340.1328)
Fractional sample size: tensor(0.9134)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(95579.2656)
Fractional sample size: tensor(0.9558)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(95474.1562)
Fractional sample size: tensor(0.9547)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(16584.6738)
Fractional sample size: tensor(0.1658)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(33611.4023)
Fractional sample size: tensor(0.3361)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(93668.3516)
Fractional sample size: tensor(0.9367)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(95403.2344)
Fractional sample size: tensor(0.9540)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(95621.6953)
Fractional sample size: tensor(0.9562)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(94516.8203)
Fractional sample size: tensor(0.9452)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(18585.4277)
Fractional sample size: tensor(0.1859)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(94634.7656)
Fractional sample size: tensor(0.9463)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(95293.8281)
Fractional sample size: tensor(0.9529)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(83989.0938)
Fractional sample size: tensor(0.8399)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100000
Effective sample size: tensor(80492.2109)
Fractional sample size: tensor(0.8049)
Sum of weights: tensor(1., dtype=torch.float64)
Samples shape: torch.Size([100000, 17])
First sample: tensor([2., 0., 2., 2., 1., 1., 0., 2., 2., 2., 0., 2., 2., 1., 2., 1., 2.])
Sample mean: tensor([1.4257, 1.5638, 1.7127, 1.6097, 1.0157, 1.4236, 1.6502, 1.6511, 1.5878,
        1.0494, 0.1283, 1.6740, 1.6661, 1.6741, 1.6218, 1.5081, 0.9356])
Sample standard deviation: tensor([0.8713, 0.7963, 0.5591, 0.6794, 0.1246, 0.7759, 0.6500, 0.6532, 0.6622,
        0.9756, 0.4900, 0.6104, 0.6643, 0.5570, 0.5932, 0.5745, 0.8283])
[34m[1mwandb[39m[22m: [33mWARNING[39m wandb.plots.* functions are deprecated and will be removed in a future release. Please use wandb.plot.* instead.
[34m[1mwandb[39m[22m: Visualizing heatmap.
Time taken [s]: 1075.9631929397583
Number of samples: 100000
Finished program 3
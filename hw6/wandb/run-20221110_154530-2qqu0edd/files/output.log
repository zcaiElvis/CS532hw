Running deterministic tests: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
Test 1 starting
Test 1 passed
Test 2 starting
Test 2 passed
Test 3 starting
Test 3 passed
Test 4 starting
Test 4 passed
Test 5 starting
Test 5 passed
Test 6 starting
Test 6 passed
Test 7 starting
Test 7 passed
Test 8 starting
Test 8 passed
Test 9 starting
Test 9 passed
Test 10 starting
Test 10 passed
Test 11 starting
Test 11 passed
Test 12 starting
Test 12 passed
Test 13 starting
Test 13 passed
Test 14 starting
Test 14 passed
Test 15 starting
Test 15 passed
Test 16 starting
Test 16 passed
Test 17 starting
Test 17 passed
Test 18 starting
Test 18 passed
Test 19 starting
Test 19 passed
Test 20 starting
Test 20 passed
Test 21 starting
Test 21 passed
Test 22 starting
Test 22 passed
All deterministic tests passed
Running hoppl-deterministic tests: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
Test 1 starting
Test 1 passed
Test 2 starting
Test 2 passed
Test 3 starting
Test 3 passed
Test 4 starting
Test 4 passed
Test 5 starting
Test 5 passed
Test 6 starting
Test 6 passed
Test 7 starting
Test 7 passed
Test 8 starting
Test 8 passed
Test 9 starting
Test 9 passed
Test 10 starting
Test 10 passed
Test 11 starting
Test 11 passed
Test 12 starting
Test 12 passed
All hoppl-deterministic tests passed
Running probabilistic tests: [1, 2, 3, 4, 5, 6, 7, 8]
Test 1 starting
Test truth: ('normal', 5, 1.4142136)
Truth: ('normal', 5, 1.4142136)
p value: 0.9902325939602731
Test 1 passed
Test 2 starting
Test truth: ('beta', 2.0, 5.0)
Truth: ('beta', 2.0, 5.0)
p value: 0.2711874753407907
Test 2 passed
Test 3 starting
Test truth: ('exponential', 0.0, 5.0)
Truth: ('exponential', 0.0, 5.0)
p value: 0.6732332797100536
Test 3 passed
Test 4 starting
Test truth: ('normal', 5.3, 3.2)
Truth: ('normal', 5.3, 3.2)
p value: 0.9192351529813493
Test 4 passed
Test 5 starting
Test truth: ('normalmix', 0.1, -1, 0.3, 0.9, 1, 0.3)
Truth: ('normalmix', 0.1, -1, 0.3, 0.9, 1, 0.3)
p value: 0.6161053908097972
Test 5 passed
Test 6 starting
Test truth: ('normal', 0, 1.44)
Truth: ('normal', 0, 1.44)
p value: 0.03032290960967987
Test 6 passed
Test 7 starting
Test truth: ('normal', 0, 1.4142136)
Truth: ('normal', 0, 1.4142136)
p value: 0.6453908892120281
Test 7 passed
Test 8 starting
Test truth: ('normal', 0, 1)
Truth: ('normal', 0, 1)
p value: 0.538941300924203
Test 8 passed
All probabilistic tests passed
Running: homework_6: 1
Inference method: SMC
Maximum samples [log10]: 2.0
Maximum time [s]: 60
Samples shape: torch.Size([100])
First sample: tensor(14.)
Sample mean: tensor(109.3800)
Sample standard deviation: tensor(121.2372)
Time taken [s]: 1.011962890625
Number of samples: 100
Finished program 1
Running: homework_6: 2
Inference method: SMC
Maximum samples [log10]: 2.0
Maximum time [s]: 60
Sample size: 100
Effective sample size: tensor(9.5227)
Fractional sample size: tensor(0.0952)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(51.8739)
Fractional sample size: tensor(0.5187)
Sum of weights: tensor(1., dtype=torch.float64)
Samples shape: torch.Size([100])
First sample: tensor(6.2519)
Sample mean: tensor(5.8681)
Sample standard deviation: tensor(0.4694)
[34m[1mwandb[39m[22m: [33mWARNING[39m wandb.plots.* functions are deprecated and will be removed in a future release. Please use wandb.plot.* instead.
[34m[1mwandb[39m[22m: Visualizing heatmap.
Time taken [s]: 0.17833995819091797
Number of samples: 100
Finished program 2
Running: homework_6: 3
Inference method: SMC
Maximum samples [log10]: 2.0
Maximum time [s]: 60
Sample size: 100
Effective sample size: tensor(91.2997)
Fractional sample size: tensor(0.9130)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(87.0510)
Fractional sample size: tensor(0.8705)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(92.3585)
Fractional sample size: tensor(0.9236)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(95.4773)
Fractional sample size: tensor(0.9548)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(95.8719)
Fractional sample size: tensor(0.9587)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(13.5742)
Fractional sample size: tensor(0.1357)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(35.7916)
Fractional sample size: tensor(0.3579)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(93.6435)
Fractional sample size: tensor(0.9364)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(95.5748)
Fractional sample size: tensor(0.9557)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(95.4511)
Fractional sample size: tensor(0.9545)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(92.4897)
Fractional sample size: tensor(0.9249)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(14.5604)
Fractional sample size: tensor(0.1456)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(93.5785)
Fractional sample size: tensor(0.9358)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(95.6268)
Fractional sample size: tensor(0.9563)
Sum of weights: tensor(1., dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(83.0674)
Fractional sample size: tensor(0.8307)
Sum of weights: tensor(1.0000, dtype=torch.float64)
Sample size: 100
Effective sample size: tensor(79.1209)
Fractional sample size: tensor(0.7912)
Sum of weights: tensor(1., dtype=torch.float64)
Samples shape: torch.Size([100, 17])
First sample: tensor([2., 2., 1., 0., 1., 0., 2., 2., 2., 0., 0., 2., 1., 0., 1., 2., 2.])
Sample mean: tensor([1.3700, 1.4300, 1.7700, 1.5200, 1.0000, 1.6600, 1.5500, 1.2500, 1.9400,
        0.8400, 0.2600, 1.8500, 1.2900, 0.7000, 1.2400, 1.8300, 1.6000])
Sample standard deviation: tensor([0.9173, 0.8905, 0.5291, 0.7585, 0.0000, 0.7551, 0.6416, 0.9574, 0.2778,
        0.9921, 0.6760, 0.3589, 0.4560, 0.8587, 0.5881, 0.3775, 0.8040])
Time taken [s]: 0.9872231483459473
Number of samples: 100
Finished program 3